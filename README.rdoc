= Simple Spreadsheet Extractor

Authors::    Stuart Owen, Finn Bacall
Version::    0.5.0
Contact::    mailto:stuart.owen@manchester.ac.uk
Licence::    BSD (See LICENCE or http://www.opensource.org/licenses/bsd-license.php)
Copyright::  (c) 2010 The University of Manchester, UK


== Synopsis

This is a simple gem that provides a facility to read an XLS or XLSX Excel spreadsheet document and produce an XML representation of its content.

CSV output can also be generated for a single sheet.

Internally it uses Apache POI, using the sister http://github.com/myGrid/simple-spreadsheet-extractor tool.

This is a simple tool developed for use within SysMO-DB[http://www.sysmo-db.org].

== Installation

Java 1.6 (JRE) is required.

  gem install simple-spreadsheet-extractor

Note that on Windows you must also do:

  gem install win32-open3

== Usage

* require 'simple-spreadsheet-extractor'
* include the module SysMODB::SpreadsheetExtractor
* pass an IO object to the method spreedsheet_to_xml which responds with the XML for the contents of the spreadsheet. Alternatively use spreadsheet_to_csv for CSV.
* if something goes wrong with the extraction then a SysMODB::SpreadsheetExtractionException will be thrown
  
e.g.

   #example.rb - takes path, i.e. ruby example.rb /tmp/spreadsheet.xls
   require 'rubygems'
   require 'simple-spreadsheet-extractor'

   include SysMODB::SpreadsheetExtractor

   path=ARGV.first

   f=open path
   begin
     puts spreadsheet_to_xml(f)
   rescue SysMODB::SpreadsheetExtractionException=>e
     puts "Something went wrong #{e.message}"
   end
   
Formulas are evaluated placing the result in the XML produced for that cell, however the original formula is included as an attribute.

Row and column indexes start at 1, rather than 0, to keep consistent with namings of the cells in Excel.

An XSD schema for the XML is available in doc/schema-v1.xsd["tree/master/doc/schema-v1.xsd"]

The desired spreadsheet extractor jar can be specified by defining SPREADSHEET_EXTRACTOR_JAR_PATH in a config file (e.g. environment.rb)

CSV can be generated in a similar way, and also takes an optional sheet number. If the sheet number is missing then the first sheet is used.

Note that the sheet number for the first sheet is 1, and can either be a string or integer.

e.g.

   puts spreadsheet_to_csv(f,"1")



== Example XML

  <?xml version="1.0" encoding="UTF-8"?>
  <workbook xmlns="http://www.sysmo-db.org/2010/xml/spreadsheet">
    <sheet name="Sheet1" index="1" hidden="false" very_hidden="false" first_row="2" last_row="8">
      <row index="2">
        <cell column="2" column_alpha="B" row="2" type="string">test2</cell>
        <cell column="3" column_alpha="C" row="2" type="string">test</cell>
        <cell column="4" column_alpha="D" row="2" type="string">test3</cell>
      </row>
  
      <row index="3">
        <cell column="2" column_alpha="B" row="3" type="string">a</cell>
        <cell column="3" column_alpha="C" row="3" type="numeric">1.0</cell>
        <cell column="4" column_alpha="D" row="3" type="numeric">22.0</cell>
      </row>
      <row index="4">
        <cell column="2" column_alpha="B" row="4" type="string">b</cell>
  
        <cell column="3" column_alpha="C" row="4" type="numeric">2.0</cell>
        <cell column="4" column_alpha="D" row="4" type="numeric">5.0</cell>
      </row>
      <row index="5">
        <cell column="2" column_alpha="B" row="5" type="string">c</cell>
        <cell column="3" column_alpha="C" row="5" type="numeric">3.0</cell>
        <cell column="4" column_alpha="D" row="5" type="numeric">1.0</cell>
  
      </row>
      <row index="6">
        <cell column="2" column_alpha="B" row="6" type="string">d</cell>
        <cell column="3" column_alpha="C" row="6" type="numeric">4.0</cell>
        <cell column="4" column_alpha="D" row="6" type="numeric">5.0</cell>
      </row>
      <row index="7">
  
        <cell column="2" column_alpha="B" row="7" type="string">e</cell>
        <cell column="3" column_alpha="C" row="7" type="numeric">5.0</cell>
        <cell column="4" column_alpha="D" row="7" type="numeric">6.0</cell>
      </row>
      <row index="8">
        <cell column="2" column_alpha="B" row="8" type="string">total</cell>
        <cell column="3" column_alpha="C" row="8" type="numeric" formula="SUM(C3:C7)">15.0</cell>
  
        <cell column="4" column_alpha="D" row="8" type="numeric" formula="SUM(D3:D7)">39.0</cell>
      </row>
    </sheet>
    <sheet name="Sheet2" index="2" hidden="false" very_hidden="false" first_row="1" last_row="1"/>
    <sheet name="Sheet3" index="3" hidden="false" very_hidden="false" first_row="1" last_row="1"/>
  </workbook>
